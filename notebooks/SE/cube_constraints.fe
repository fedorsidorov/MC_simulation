
PARAMETER angle_s_ind = 55
PARAMETER angle_m_ind = 90

PARAMETER TENS_r = 33.5e-2
PARAMETER TENS_s = -TENS_r*cos((angle_s_ind)*pi/180)
PARAMETER TENS_m  = -TENS_r*cos((angle_m_ind)*pi/180)

constraint 1   /* fixing the resist on the substrate surface */
formula: x3 = 0

constraint 3 nonpositive /* pinning resist on upper end of un-exposed PMMA pillar*/
formula: x3 = 1

constraint 4   /* mirror plane, resist on front-side wall */
formula: x1 = 1

constraint 5   /* mirror plane, resist on back-side wall */
formula: x1 = 0

vertices
1  -0.5 0.0 0.0 constraints 1 5
2   0.5 0.0 0.0 constraints 1 4
3   0.5 1.0 0.0 constraints 1 4
4  -0.5 1.0 0.0 constraints 1 5
5  -0.5 0.0 1.0 constraints 3 5
6   0.5 0.0 1.0 constraints 3 4
7   0.5 1.0 1.0 constraints 3 4
8  -0.5 1.0 1.0 constraints 3 5

9  -0.5 1.0 0.5 constraint 5 
10  0.5 1.0 0.5 constraint 4

edges  /* given by endpoints and attribute */
1   1 2 constraint 1
2   2 3 constraints 1 4
3   3 4 constraint 1
4   4 1 constraints 1 5
5   5 6 constraint 3
6   6 7 constraints 3 4
7   7 8 constraint 3
8   8 5 constraints 3 5
9   1 5 constraint 5
10  2 6 constraint 4
111  3 10 constraint 4
112  10 7 constraint 4
121  4 9 constraint 5
122  9 8 constraint 5
13  10 9

faces  /* given by oriented edge loop */
1   1 10 -5  -9    tension TENS_r
2   2 111 112 -6 -10    tension TENS_m
//3   3 12 -7 -11    tension TENS_r
31  13 122 -7  -112  tension TENS_r
32   3 121 -13 -111  tension TENS_r
4   4  9 -8 -122 -121    tension TENS_m
5   5  6  7   8    tension TENS_r
6  -4 -3 -2  -1    tension TENS_s

bodies  /* one body, defined by its oriented faces */
1   1 5 31 32  volume 1

read

/*meshing*/
meshit := {r 3; area_normalization}


/*iteration*/
loopit := {g50; w 0.001; w 0.001; V}

// Typical evolution to sphere
gogo := { g 5; r; g 5; hessian; r; g 5; hessian; }

// Evolution to very high accuracy, using higher-order Lagrange elements.
// To be run on original datafile.
gogo2 := { g 5; r; g 5; hessian; r; g 5; hessian;
           lagrange 2; g 5; hessian; 
           lagrange 4; g 5; hessian; 
           lagrange 6; g 5; hessian; 
           ideal_rad := (3*body[1].volume/4/pi)^(1/3);
           printf "Area error: %g\n",total_area - 4*pi*ideal_rad^2;
           printf "Vertex radius spread: %g\n",
             max(vertex,sqrt((x-.5)^2+(y-.5)^2+(z-.5)^2))
               - min(vertex,sqrt((x-.5)^2+(y-.5)^2+(z-.5)^2));
}
